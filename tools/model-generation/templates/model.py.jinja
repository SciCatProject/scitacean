{%- macro validations(fields) %}
{%- for validation in ("emails", "orcids") %}
{%- set fields = fields|selectattr("validation", "eq", validation)|list -%}
{% if fields %}

    @pydantic.validator({{ fields|map("attr", "scicat_name")|map("quote")|join(", ") }})
    def _validate_{{ validation }}(cls, value: Any) -> Any:
        return validate_{{ validation }}(value)
{%- endif %}
{%- endfor %}
{% endmacro -%}

{{ banner }}
# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2023 SciCat Project (https://github.com/SciCatProject/scitacean)
"""Models for communication with SciCat and user facing dataclasses."""

from __future__ import annotations

import dataclasses
from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import NonNegativeInt
import pydantic

from ._base_model import (
    BaseModel,
    BaseUserModel,
    DatasetType,
    validate_emails,
    validate_orcids,
)
from .filesystem import RemotePath
from .pid import PID

{% set fields = dset_spec.fields_for("download") -%}
class DownloadDataset(BaseModel):
{%- for field in fields %}
    {{ field.scicat_name }}: {{ field.full_type_for("download") }}
{%- endfor %}
{{- validations(fields) }}

{% for dset_type in ("derived", "raw") %}
{%- set fields = dset_spec.dset_fields_for("upload", dset_type) -%}
class Upload{{ dset_type|capitalize }}Dataset(BaseModel):
{%- for field in fields %}
    {{ field.scicat_name }}: {{ field.full_type_for("upload") }}
{%- endfor %}
{{- validations(fields) }}

{% endfor -%}

{% for spec in specs.values() -%}
{% for name, kind in ((spec.download_name, "download"), (spec.upload_name, "upload")) %}
{%- set fields = spec.fields_for(kind) -%}
{%- if fields -%}
class {{ name }}(BaseModel):
{%- for field in fields %}
    {{ field.scicat_name }}: {{ field.full_type_for(kind) }}
{%- endfor %}
{{- validations(fields) }}

{% endif -%}
{% endfor -%}
{% endfor -%}

{% for spec in specs.values() -%}
@dataclasses.dataclass
class {{ spec.name }}(BaseUserModel):
{%- set fields = spec.fields_for("user")|sort(attribute="upload", reverse=True) -%}
{%- for field in fields %}
    {% if field.upload %}{{ field.name }}{% else %}_{{ field.name }}{% endif %}: {{ field.full_type_for("user") }}
{%- endfor %}
{% for field in fields|rejectattr("upload") %}
    @property
    def {{ field.name }}(self) -> {{ field.full_type_for("user") }}:
        return self._{{ field.name }}
{% endfor %}
    @classmethod
    def from_download_model(cls, download_model: {{ spec.download_name }}) -> {{ spec.name }}:
        """Construct an instance from an associated SciCat download model."""
        return cls(**cls._download_model_dict(download_model))
{% if spec.upload_name %}
    def make_upload_model(self) -> {{ spec.upload_name }}:
        """Construct a SciCat upload model from self."""
        return {{ spec.upload_name }}(**self._upload_model_dict())
{% endif %}

{% endfor -%}
